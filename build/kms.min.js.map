{"version":3,"file":"kms.min.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ER,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,kMCLvD,MAAM,EAA+BC,QAAQ,a,aCA7C,MAAM,EAA+BA,QAAQ,W,q0DCUtC,IAAMC,EAAb,a,qRAAA,U,UAAA,G,EAAA,E,mJASI,WAAYC,EAAiBC,GAAc,M,MAAA,O,4FAAA,SACvC,cAAMD,G,EADiC,K,OAAA,G,EAAA,U,wFAEvC,EAAKE,KAAO,WACZ,EAAKD,KAAOA,EAH2B,EAT/C,O,EAAA,E,EAAA,uBAoBI,SAAgBE,GACZ,IAAMC,GAAMC,EAAAA,EAAAA,WAAUF,GACtB,OAAO,IAAIJ,EAASK,EAAIE,KAAK,WAAWC,OAAQH,EAAIE,KAAK,QAAQC,Y,EAtBzE,O,8EAAA,KAA8BC,Q,6kFCiBvB,SAASC,EACZC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAgFH,SACHC,EACAC,EACAC,EACAL,GAEA,IAAMM,EAAUH,EACVI,EAAOC,EAAOJ,GAIdK,GAAaC,EAAAA,EAAAA,MAAK,SAAU,OAASJ,EAASC,EAAM,UACpDI,GAAeD,EAAAA,EAAAA,MAAK,SAAUD,EAAOJ,EAAQ,UAC7CO,GAAgBF,EAAAA,EAAAA,MAAK,SAAUC,EAASX,EAAS,UAGvD,OAFsBU,EAAAA,EAAAA,MAAK,SAAUE,EAAU,eAAgB,UA9FrCC,CACtBd,EAAUI,gBACVT,EACAK,EAAUM,OACVL,GAGEc,EAqLH,SACHnB,EACAoB,EACAC,EACAvB,EACAwB,EACAhB,GAEA,IAAMiB,EAAoBvB,EAAOwB,cAC3BC,EA4BH,SAA4BL,EAAad,GAC5C,GAAW,KAAPc,EACA,OAAOA,EAGX,IAAIK,EAAeL,EACQ,KAAvBA,EAAIA,EAAIM,OAAS,IAAsD,KAAzCD,EAAaA,EAAaC,OAAS,KACjED,GAAgB,KAKpB,OAFAA,EAAeE,EAAUF,EAAcnB,EAAkBL,MAElDK,EAAiB,OAAUqB,EAAUF,EAAcnB,EAAkBL,MAAQwB,EAxC/DG,CAAmBR,EAAKd,GACvCuB,EAkDH,SAAoCC,GACvC,GAAW,KAAPA,EACA,MAAO,GAoBX,OA6MG,SAA0BA,GAC7B,GAAkB,IAAdA,EAAGJ,OACH,MAAO,GAGX,OAAOI,EACFC,MAAM,KACNC,QAAO,SAACC,GAAD,OAAOA,KACdC,KAAI,SAACC,GACF,IAAMC,EAAQD,EAAEJ,MAAM,IAAK,GAC3B,MAAO,CAACM,mBAAmBD,EAAM,IAAKC,mBAAmBD,EAAM,QAElEE,MAAK,SAACrE,EAAqBsE,GACxB,OAAOtE,EAAE,GAAGuE,cAAcD,EAAE,OA1N7BE,CAAiBX,GACnBI,KAAI,YAA4C,aAA1C9D,EAA0C,KAArCa,EAAqC,KAC7C,OAAOyD,mBAAmBtE,GAAO,IAAMsE,mBAAmBzD,MAE7D0D,KAAK,KA5EmBC,CAA2BvB,GAClDwB,EA2FH,SAAgC/C,GACnC,GAAIA,EAAQgD,cAAgBxE,QAA6C,IAAnCA,OAAOyE,QAAQjD,GAAS4B,OAC1D,MAAO,GAqBX,OAlByBpD,OAAOyE,QAAQjD,GACnCoC,KAAI,YAAoB,aAAlB5C,EAAkB,KAAZ0D,EAAY,KAYrB,OAXsB1D,EAAK2D,cAAcC,OAWlB,KAVEC,MAAMC,QAAQJ,GAAUA,EAAS,CAACA,IAItDd,KAAI,SAACC,GAEF,OAAOA,EAAEkB,QAAQ,OAAQ,KAAKA,QAAQ,aAAc,OAEvDV,KAAK,KAEqC,QAElDL,OACAK,KAAK,IAhHeW,CAAuBxD,GAC1CyD,EAAgBC,EAAoB1D,GACpC2D,EAqKH,SAAgCnC,GACnC,GAAIA,IAAYoC,EACZ,OAAOpC,EAMX,OAAOqC,IAAAA,OAAcrC,GAAW,GAAI,OAAO2B,cA7KpBW,CAAuBtC,GAW9C,MATyB,CACrBC,EACAE,EACAI,EACAgB,EACAU,EACAE,GACFd,KAAK,MA3MkBkB,CACrB7D,EACAC,EACAC,EACAJ,EACAK,EACAG,GAGEwD,EA2GH,SACH/D,EACAW,EACAL,EACA0D,GAGA,IAAMC,EAAkBC,EAAOlE,GAKzBmE,EAAkBC,EAAsBpE,EAAkBW,EAAQL,GAgBxE,MAdqB,CAEjB+D,EAGAJ,EAGAE,EAGAH,GACFpB,KAAK,MArIc0B,CACjBtE,EACAK,EAAUM,OACVL,GACAiE,EAAAA,EAAAA,QAAOnD,EAAkB,QAGvB+C,EAAkBC,EAAsBpE,EAAkBK,EAAUM,OAAQL,GAC5EkD,EAAgBC,EAAoB1D,GACpCyE,EAmCH,SAA4BhE,EAAgCuD,GAC/D,OAAO/C,EAAAA,EAAAA,MAAK,SAAUR,EAAmBuD,EAAc,OApCrCU,CAAmBjE,EAAmBuD,GAClDW,EAAsB,GAAH,OAAML,EAAN,uBAAqChE,EAAUsE,YAA/C,YAA8DR,EAA9D,2BAAgGX,EAAhG,uBAA4HgB,GAIrJ,OAFAzE,EAAO,cAAoB2E,EAEpB3E,EAWJ,IAAM6E,EAAb,a,qRAAA,iBAMI,WAAYvF,EAAiBC,GAAc,wBACvC,cAAMD,EAASC,IACVC,KAAO,wBAF2B,EAN/C,aAA2CH,GA2DpC,IAAMiF,EAAmB,mBAOnBV,EAAkB,mBA6DxB,SAASS,EACZpE,EACAW,EACAL,GAEA,MAAO,CAACQ,EAAOd,GAAmBW,EAAQL,EAAS,gBAAgBsC,KAAK,KA+JrE,SAASa,EAAoB1D,GAChC,GAAIA,EAAQgD,cAAgBxE,OACxB,MAAM,IAAIsG,UAAU,+BAGxB,GAAuC,IAAnCtG,OAAOyE,QAAQjD,GAAS4B,OACxB,KAAM,8FAYV,OALepD,OAAOuG,KAAK/E,GACtBoC,KAAI,SAAC5C,GAAD,OAAUA,EAAK2D,cAAcC,UACjCZ,OACAK,KAAK,KAqDP,SAAShB,EAAUP,EAAanB,GACnC,MAAW,IAAPmB,EACOA,EAGJA,EACFW,MAAM,IACNG,KAAI,SAAC4C,GACF,OAmFKC,EAnFOD,IAoFP,KAAOC,GAAK,KAASA,GAAK,KAAOA,GAAK,KAGvD,SAAmBA,GACf,OAAOA,GAAK,KAAOA,GAAK,IAxFOC,CAAUF,IAAW,OAAOG,SAASH,GACjDA,EAIG,KAAVA,EACO,MAKG,KAAVA,GAAiB7E,EACV,IAGJ,IAAM6E,EAAOI,WAAW,GAAGC,SAAS,IAAI3D,cAoE3D,IAAiBuD,KAlERpC,KAAK,IAMP,IAAMyC,EAAb,GAUI,WAAYC,EAAiBpF,GAAe,wDACxCqF,KAAA,OAAcD,EACdC,KAAKrF,KAAOA,KAWb,SAASgE,EAAOsB,GACnB,OAAO,IAAIC,KAAKD,GAAWE,cAAcpC,QAAQ,iBAAkB,IAQhE,SAASxC,EAAO0E,GACnB,OAAOtB,EAAOsB,GAAWG,UAAU,EAAG,G,ooECtfnC,IAAMC,EAAb,GAaI,WAAYjF,EAAgBgE,EAAqBlE,GAC7C,GADsE,gGACvD,KAAXE,EACA,MAAM,IAAIkF,EACN,4DAIR,GAAoB,KAAhBlB,EACA,MAAM,IAAIkB,EACN,mEAIR,GAAIlB,EAAYhD,OAAS,IAAMgD,EAAYhD,OAAS,IAChD,MAAM,IAAIkE,EAAJ,+FACsFlB,EAAYhD,SAI5G,GAAwB,KAApBlB,EACA,MAAM,IAAIoF,EACN,uEAIR,GAAIpF,EAAgBkB,OAAS,IAAMlB,EAAgBkB,OAAS,IACxD,MAAM,IAAIkE,EAAJ,mGAC0FpF,EAAgBkB,SAIpH4D,KAAK5E,OAASA,EACd4E,KAAKZ,YAAcA,EACnBY,KAAK9E,gBAAkBA,KAKlBoF,EAAb,a,qRAAA,U,IAAA,G,EAAA,E,mJACI,WAAYxG,GAAiB,6BACnBA,GAFd,eAA2CQ,QCpD3C,MAAM,EAA+BV,QAAQ,W,wmGCatC,IAAM2G,GAAb,gCAQI,WAAYzF,GAAsB,iBAC9B,IAAME,EAAoB,IAAI8E,GAAkB,GAAM,GADxB,aAE9B,cAAMhF,EAAW,MAAOE,IAFM,kDAQ9B,EAAKN,OAAS,OAEd,EAAK8F,cAAgB,CACjB,kBAAmB,WACnB,eAAgB,8BAZU,EARtC,0CA8BI,SAAgBC,GAAoE,IAArDC,EAAqD,uDAA7B,GAC7C7F,EAAO8F,KAAKC,UAAU,CAAEH,MAAOA,EAAOC,cAAgBA,IACtDG,EAA4B,GAAH,+CAC3Bb,KAAKtF,OACLsF,KAAKc,KACL,IACA,GACAjG,EAL2B,SAOpBmF,KAAKQ,eAPe,IAQvB,iDAGFO,EAAMC,IAAAA,QAAahB,KAAKtF,OAAQmG,EAAcI,IAAKpG,EAAM,CAC3DL,QAASqG,EAAcrG,UAI3B,OAFAwF,KAAKkB,cAAc,kBAAmBH,GAE/BI,GAAYC,SAASL,EAAIM,UAhDxC,gBAmDI,WACI,gBAAUrB,KAAKsB,YAAf,YAA8BtB,KAAKlF,UAAUM,OAA7C,oBApDR,2BAwDI,SAAcmG,EAAmBC,GAC7B,IAAMC,EAAYD,EAASE,WAC3B,GAAkB,IAAdD,EAAJ,CAIA,IAAME,EAAQH,EAASH,OACvB,GAAII,GAAa,MAAQA,GAAa,KAAM,CAGxC,IAAMG,EACDD,EAAME,SAAuBF,EAAM7H,SAAuB6H,EAAMG,OAGrE,GAAqB,8BAAjBH,EAAMG,OACN,MAAM,IAAIzC,EAAsBuC,EAAcD,EAAMG,QAIxD,MAAM,IAAIC,GAAgBH,EAAcD,EAAMG,OAAkBP,GAGpE,GAAkB,OAAdE,EACA,MAAM,IAAIM,GACN,sCACA,uBACAR,QAlFhB,GCFA,WAUI,WAAYzG,EAAsBwG,EAAqBtG,I,4FAAsC,oGACzFgF,KAAKlF,UAAYA,EACjBkF,KAAKsB,YAAcA,EACnBtB,KAAKhF,kBAAoBA,E,UAbjC,O,EAAA,G,EAAA,2BAgBI,SACIN,EACAoG,EACAnG,EACAC,EACAC,EACAL,GAEA,IAAMC,EAA2ByF,KAAK8B,MAChC1G,EAAeqD,EAAOlE,GAE5BD,EAAO,KAAWsG,EAClBtG,EAAQ,cAAgBc,EAExBd,EAAUD,EAENC,EAGAC,EAGAC,EAGAC,EAGAC,EAGAC,EAGAmF,KAAKlF,UAGLkF,KAAKsB,YAKLtB,KAAKhF,mBAITL,EAAgB,KAATA,EAAcA,EAAO,IAC5B,IAAIsG,EAAM,WAAH,OAAcH,GAAd,OAAqBnG,GAK5B,MAJoB,KAAhBC,IACAqG,GAAO,IAAJ,OAAQrG,IAGR,CAAEqG,IAAKA,EAAKzG,QAASA,Q,8EApEpC,MD4Fa2G,GAAb,WAKI,WACIc,EACAxB,EACAyB,GACH,gGACGlC,KAAKiC,eAAiBA,EACtBjC,KAAKS,MAAQA,EACbT,KAAKkC,UAAYA,EAZzB,wCAcI,SAAgBb,GACZ,OAAO,IAAIF,EACPE,EAAKY,eACLZ,EAAKZ,MACLY,EAAKa,eAlBjB,KAuBaH,GAAb,gCAUI,WAAYjI,EAAiBC,EAAcwH,GAAmB,8BAC1D,cAAMzH,EAASC,IAD2C,oBAE1D,EAAKC,KAAO,kBACZ,EAAKuH,UAAYA,EAHyC,EAVlE,cAAqC1H,G","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/kms.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    code: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import crypto, { hmac, sha256 } from 'k6/crypto'\nimport { HTTPMethod, HTTPHeaders } from './http'\nimport { AWSConfig } from './config'\nimport { AWSError } from './error'\n\n/**\n * Includes AWS v4 signing information to the provided HTTP headers object.\n *\n * This function will compute the `Authorization` header signature for the\n * provided request components, and add it to `header`. It will do so by following\n * the procedure detailled AWS' API docs: https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n *\n * The resulting `Authorization` header value is computed for the provided\n * headers object. Thus, any modification of the headers past a call to `signHeaders`\n * would effectively invalidate their signature, and the function should be\n * called again to recompute it.\n *\n * @param  {object} headers - HTTP headers request to sign.\n * @param  {number} requestTimestamp - Timestamp of the request\n * @param  {string} method - HTTP method used\n * @param  {string} path - HTTP request URL's path\n * @param  {string} queryString - HTTP request URL's querystring\n * @param  {string | ArrayBuffer} body - HTTP request's payload\n * @param  {AWSConfig} - AWS configuration\n * @param  {string} service - AWS service name\n * @param  {URIEncodingConfig} - URI encoding configuration\n */\nexport function signHeaders(\n    headers: HTTPHeaders,\n    requestTimestamp: number,\n    method: HTTPMethod,\n    path: string,\n    queryString: string,\n    body: string | ArrayBuffer,\n    awsConfig: AWSConfig,\n    service: string,\n    URIencodingConfig: URIEncodingConfig\n): HTTPHeaders {\n    const derivedSigningKey = deriveSigningKey(\n        awsConfig.secretAccessKey,\n        requestTimestamp,\n        awsConfig.region,\n        service\n    )\n\n    const canonicalRequest = createCanonicalRequest(\n        method,\n        path,\n        queryString,\n        headers,\n        body,\n        URIencodingConfig\n    )\n\n    const stringToSign = createStringToSign(\n        requestTimestamp,\n        awsConfig.region,\n        service,\n        sha256(canonicalRequest, 'hex')\n    )\n\n    const credentialScope = createCredentialScope(requestTimestamp, awsConfig.region, service)\n    const signedHeaders = createSignedHeaders(headers)\n    const signature = calculateSignature(derivedSigningKey, stringToSign)\n    const authorizationHeader = `${HashingAlgorithm} Credential=${awsConfig.accessKeyID}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${signature}`\n\n    headers['Authorization'] = authorizationHeader\n\n    return headers\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\n/**\n * Calculte the signature for AWS signature version 4\n *\n * @param  {string} derivedSigningKey - dervied signing key as computed by `deriveSigningKey`\n * @param  {string} stringToSign - String to sign as computed by `createStringToSign`\n * @return {string}\n */\nexport function calculateSignature(derivedSigningKey: ArrayBuffer, stringToSign: string): string {\n    return hmac('sha256', derivedSigningKey, stringToSign, 'hex')\n}\n/**\n * Derives the signing key for authenticating requests signed with\n * the Signature version 4 authentication protocol.\n *\n * deriveSigningKey produces a signing key by creating a series of\n * hash-based message authentication codes (HMACs) represented in\n * a binary format.\n *\n * The derived signing key is specific to the date it's made at, as well as\n * the service and region it targets.\n *\n * @param  {string} secretAccessKey - the AWS secret access key to derive the signing key for\n * @param  {number} time - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service. MUST be UTF-8 encoded.\n * @return {string}\n */\nexport function deriveSigningKey(\n    secretAccessKey: string,\n    time: number,\n    region: string,\n    service: string\n): ArrayBuffer {\n    const kSecret = secretAccessKey\n    const date = toDate(time)\n\n    // FIXME: hmac takes ArrayBuffer as input, but returns bytes (number[]).\n    // How does one convert from one to the other?\n    const kDate: any = hmac('sha256', 'AWS4' + kSecret, date, 'binary')\n    const kRegion: any = hmac('sha256', kDate, region, 'binary')\n    const kService: any = hmac('sha256', kRegion, service, 'binary')\n    const kSigning: any = hmac('sha256', kService, 'aws4_request', 'binary')\n\n    return kSigning\n}\n\n// Hashing Algorithm to use in the signature process\nexport const HashingAlgorithm = 'AWS4-HMAC-SHA256'\n\n/**\n * Certain services, such as S3, allow for unsigned payloads. If\n *  producing a signed canonical request for such service, pass\n *  the `UnsignedPayload` constant value as the payload parameter.\n */\nexport const UnsignedPayload = 'UNSIGNED-PAYLOAD'\n\n/**\n * Create the \"string to sign\" part of the signature Version 4 protocol.\n *\n * The \"string to sign\" includes meta information about your request and\n * about the canonical request that you created with `createCanonicalRequest`.\n * It is used hand in hand with the signing key to create the request signature.\n *\n * @param  {number} requestTimestamp - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service name. MUST be UTF-8 encoded.\n * @param  {string} hashedCanonicalRequest - canonical request as produced by calling the createCanonicalRequest function,\n *     hashed using the SHA256 algorithm (encoded in hexadecimal format).\n * @return {string}\n */\nexport function createStringToSign(\n    requestTimestamp: number,\n    region: string,\n    service: string,\n    hashedCanonicalRequest: string\n): string {\n    // the request date specified in ISO8601 format: YYYYMMDD'T'HHMMSS'Z'\n    const requestDateTime = toTime(requestTimestamp)\n\n    // The credential scope value, consisting of the date in YYYYMMDD format,\n    // the targeted region, the targeted service, and a termination string.\n    // Note that the region and service MUST be UTF-8 encoded.\n    const credentialScope = createCredentialScope(requestTimestamp, region, service)\n\n    const stringToSign = [\n        // Algorithm\n        HashingAlgorithm,\n\n        // RequestDateTime\n        requestDateTime,\n\n        // CredentialScope\n        credentialScope,\n\n        // HashedCanonicalRequest\n        hashedCanonicalRequest,\n    ].join('\\n')\n\n    return stringToSign\n}\n\n/**\n *\n * Helper function creating a credential scope string to use in the signature\n * version 4 process. A credential scope consists of the date of the request\n * in YYYYMMDD format, the targeted region, the targeted service, and a\n * termination string.\n *\n * Note that the region and service MUST be UTF-8 encoded.\n *\n * @param  {number} requestTimestamp - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service name. MUST be UTF-8 encoded.\n * @return {string}\n */\nexport function createCredentialScope(\n    requestTimestamp: number,\n    region: string,\n    service: string\n): string {\n    return [toDate(requestTimestamp), region, service, 'aws4_request'].join('/')\n}\n\n/**\n *  Create a string that includes information from your request\n * in a AWS signature v4 standardized (canonical) format.\n *\n * @param  {string} method - the HTTP request method\n * @param  {string} uri - URI-encoded version of the absolute path component of the URI\n * @param  {string} query - request's query string\n * @param  {Object} headers - all the HTTP headers that you wish to include with the signed request\n * @param  {string | ArrayBuffer} payload -  payload to include as the body of the request\n * @param  {URIEncodingConfig} URIencodingConfig- URI encoding configuration\n * @return {string}\n */\nexport function createCanonicalRequest(\n    method: HTTPMethod,\n    uri: string,\n    query: string,\n    headers: HTTPHeaders,\n    payload: string | ArrayBuffer,\n    URIencodingConfig: URIEncodingConfig\n): string {\n    const httpRequestMethod = method.toUpperCase()\n    const canonicalURI = createCanonicalURI(uri, URIencodingConfig)\n    const canonicalQueryString = createCanonicalQueryString(query)\n    const canonicalHeaders = createCanonicalHeaders(headers)\n    const signedHeaders = createSignedHeaders(headers)\n    const requestPayload = createCanonicalPayload(payload)\n\n    const canonicalRequest = [\n        httpRequestMethod,\n        canonicalURI,\n        canonicalQueryString,\n        canonicalHeaders,\n        signedHeaders,\n        requestPayload,\n    ].join('\\n')\n\n    return canonicalRequest\n}\n\n/**\n *  Creates the (canonical) URI-encoded version of the\n *  absolute path component of the URI: everything in the URI\n *  from the HTTP host to the question mark character (\"?\")\n *  that begins the query string parameters (if any).\n *\n * @param  {string} uri - URI to canonize\n * @param  {URIEncodingConfig} - URI encoding configuration\n * @return {string} - canonical URL\n */\nexport function createCanonicalURI(uri: string, URIencodingConfig: URIEncodingConfig): string {\n    if (uri == '/') {\n        return uri\n    }\n\n    let canonicalURI = uri\n    if (uri[uri.length - 1] == '/' && canonicalURI[canonicalURI.length - 1] != '/') {\n        canonicalURI += '/'\n    }\n\n    canonicalURI = URIEncode(canonicalURI, URIencodingConfig.path)\n\n    return URIencodingConfig.double ? URIEncode(canonicalURI, URIencodingConfig.path) : canonicalURI\n}\n\n/**\n * Creates the canonical form of the request's query\n * string. If the request does not include a query string,\n * provide an empty string.\n *\n * @param  {String | Object} qs - query string to canonize\n * @return {string}\n */\nexport function createCanonicalQueryString(qs: string): string {\n    if (qs === '') {\n        return ''\n    }\n\n    // const intermediary: { [key: string]: string } = parseQueryString(qs)\n\n    // return Object.keys(intermediary)\n    //     .sort()\n    //     .map((key: string) => {\n    //         // const values: string[] = Array.isArray(intermediary[key])\n    //         //     ? intermediary[key]\n    //         //     : [intermediary[key]]\n    //         const values = intermediary[key]\n\n    //         return values\n    //             .sort()\n    //             .map((val: string) => encodeURIComponent(key) + '=' + encodeURIComponent(val))\n    //             .join('&')\n    //     })\n    //     .join('&')\n\n    return parseQueryString(qs)\n        .map(([key, value]: [string, string]): string => {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(value)\n        })\n        .join('&')\n}\n/**\n * Create the canonical form of the request's headers.\n * Canonical headers consist of all the HTTP headers you\n * are including with the signed request.\n *\n * Note that:\n *   * for HTTP/1.1 requests, the headers should at least\n * contain the `host` header.\n *   * for HTTP/2, the `:authority` header must be used instead\n * of `host`.\n *\n * @param  {Object} headers\n * @return {string}\n */\nexport function createCanonicalHeaders(headers: HTTPHeaders) {\n    if (headers.constructor !== Object || Object.entries(headers).length === 0) {\n        return ''\n    }\n\n    const canonicalHeaders = Object.entries(headers)\n        .map(([name, values]) => {\n            const canonicalName = name.toLowerCase().trim()\n            const normalizedValues = Array.isArray(values) ? values : [values]\n\n            // Note that we do not need to sort values\n            const canonicalValues = normalizedValues\n                .map((v) => {\n                    // convert sequential spaces to a single space\n                    return v.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '')\n                })\n                .join(',') // standard for multiple values in a HTTP header\n\n            return canonicalName + ':' + canonicalValues + '\\n'\n        })\n        .sort()\n        .join('')\n\n    return canonicalHeaders\n}\n\n/**\n * Create the canonical request's signed headers.\n *\n * The signed headers part of the request contains the\n * list of headers included in the request's signing process.\n *\n * Note that:\n *   * for HTTP/1.1 requests, the `host` header must be included.\n *   * for HTTP/2 requests, the `:authority` header must be included instead\n *   of host.\n *   * if used, the `x-amz-date` header must be included.\n *\n * @param  {Object} headers\n * @return {string}\n * @throws {TypeError} - on headers not being an Object, or being empty.\n */\nexport function createSignedHeaders(headers: { [key: string]: string }) {\n    if (headers.constructor !== Object) {\n        throw new TypeError('headers should be an object')\n    }\n\n    if (Object.entries(headers).length === 0) {\n        throw 'headers should at least contain either the Host (HTTP 1.1) or :authority (HTTP 2) parameter'\n    }\n\n    // To create the signed headers list, convert\n    // all header names to lowercase, sort them by\n    // character code, and use a semicolon to separate\n    // the header names.\n    const result = Object.keys(headers)\n        .map((name) => name.toLowerCase().trim())\n        .sort()\n        .join(';')\n\n    return result\n}\n\n/**\n * Create the canonical form of the request's payload.\n *\n * The canonical payload consists in a lowercased, hex encoded,\n * SHA256 hash of the requests body/payload.\n *\n * Certain services, such as S3, allow for unsigned payload. If\n * producing a signed canonical request for such service, pass\n * the `UnsignedPayload` constant value as the payload parameter.\n *\n * @param  {String | ArrayBuffer} payload\n * @return {string}\n */\nexport function createCanonicalPayload(payload: string | ArrayBuffer) {\n    if (payload === UnsignedPayload) {\n        return payload\n    }\n\n    // Note that if the paylaod is null, we convert it\n    // to an empty string.\n    // TODO: Should switching to empty string if null impact headers?\n    return crypto.sha256(payload || '', 'hex').toLowerCase()\n}\n\n/**\n * URIEncodes encodes every bytes of a URI to be URL-safe.\n *\n * This implementation is specific to AWS; who intended to make it as\n * close as possible to the underlying RFC 3946. It:\n *   * URI encode every byte except the unreserved characters: 'A'-'Z', 'a'-'z', '0'-'9',\n *     '-', '.', '_', and '~'.\n *   * considers the space character as a reserved character and must URI encodes\n *     encodes it as \"%20\" (and not as \"+\").\n *   * URI encodes every byte by prefixing with '%' the two-digit hexadecimal value of the byte.\n *   * If the `path` argument is set, forward slashes are not encoded, to fit with\n *     S3 requirements.\n *\n * N.B: this implementation differs with ES6' mainly in that it does\n * encode the \"'\" character.\n *\n * Based on AWS implementation: https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/util/SdkHttpUtils.java#L66\n * Encoding specs: https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\n *\n * @param {string} uri - uri to encode\n * @param {boolean} path - slash characters should be encoded everywhere,\n *     but in paths, set to false when encoding a path\n * @return {string} the URI encoded result\n */\nexport function URIEncode(uri: string, path: boolean): string {\n    if (uri == '') {\n        return uri\n    }\n\n    return uri\n        .split('') // to be able to map over a string, because... javascript...\n        .map((letter: string) => {\n            if (isAlpha(letter) || isNumeric(letter) || '-._~'.includes(letter)) {\n                return letter\n            }\n\n            // Space should be explicitly encoded to as %20.\n            if (letter == ' ') {\n                return '%20'\n            }\n\n            // If the URI is a path, the forward slash shouldn't\n            // be encoded.\n            if (letter == '/' && path) {\n                return '/'\n            }\n\n            return '%' + letter.charCodeAt(0).toString(16).toUpperCase()\n        })\n        .join('')\n}\n\n/**\n * Class holding URI encoding configuration\n */\nexport class URIEncodingConfig {\n    double: boolean\n    path: boolean\n\n    /**\n     *\n     * @param {boolean} double - should the URI be double encoded?\n     * @param {boolean} path - is the URI a path? If so, its forward\n     *     slashes won't be URIencoded.\n     */\n    constructor(double: boolean, path: boolean) {\n        this.double = double\n        this.path = path\n    }\n}\n\n/**\n * Compute the request time value as specified by the ISO8601\n * format: YYYYMMDD'T'HHMMSS'Z'\n *\n * @param  {number} timestamp\n * @return {string}\n */\nexport function toTime(timestamp: number): string {\n    return new Date(timestamp).toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\n}\n/**\n * Computethe request date value in the format: YYYMMDD\n *\n * @param  {number} timestamp\n * @return {string}\n */\nexport function toDate(timestamp: number): string {\n    return toTime(timestamp).substring(0, 8)\n}\n\n/**\n * Parse a HTTP request URL's querystring into an object\n * containing its `key=value` pairs.\n *\n * @param  {string} qs\n * @return {object}\n */\nexport function parseQueryString(qs: string): Array<[string, string]> {\n    if (qs.length === 0) {\n        return []\n    }\n\n    return qs\n        .split('&')\n        .filter((e) => e)\n        .map((v: string): [string, string] => {\n            const parts = v.split('=', 2) as [string, string]\n            return [decodeURIComponent(parts[0]), decodeURIComponent(parts[1])]\n        })\n        .sort((a: [string, string], b: [string, string]) => {\n            return a[0].localeCompare(b[0])\n        })\n}\n\nfunction isAlpha(c: string): boolean {\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')\n}\n\nfunction isNumeric(c: string): boolean {\n    return c >= '0' && c <= '9'\n}\n\n// FIXME: finish implementation when needed\n// See the following for more details:\n//   * https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n//   * https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n// export function signQueryString(\n// queryString,\n// requestTimestamp,\n// accessKeyID,\n// secretAccessKey,\n// region,\n// service,\n// ttl, // in seconds\n// headers,\n// doubleURIEncoding = true\n// ) {\n// const credential = [accessKeyID, toDate(requestTimestamp), region, service].join('/')\n//\n// const canonicalRequest = createCanonicalRequest(\n// method,\n// path,\n// queryString,\n// headers,\n// body,\n// doubleURIEncoding\n// )\n//\n// const derivedSigningKey = deriveSigningKey(secretAccessKey, requestTimestamp, region, service)\n//\n// const stringToSign = createStringToSign(\n// requestTimestamp,\n// region,\n// service,\n// sha256(canonicalRequest, 'hex')\n// )\n//\n// const signedHeaders = createSignedHeaders(headers)\n// const signature = calculateSignature(derivedSigningKey, stringToSign)\n//\n// return [\n// `X-Amz-Algorithm=${HashingAlgorithm}`,\n// `X-Amz-Credential=${crediental}`,\n// `X-Amz-Date=${toTime(requestTimestamp)}`,\n// `X-Amz-Expires=${ttl}`,\n// `X-Amz-SignedHeaders=${signedHeaders}`,\n// `X-Amz-Signature=${signature}`,\n//`X-Amz-Security-Token=`,  // TODO: optional\n// ].join('&')\n// }\n","/** Class holding an AWS connection information */\nexport class AWSConfig {\n    region: string\n    accessKeyID: string\n    secretAccessKey: string\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {string} region - the AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     * @param {string} accessKeyID - Your user's AWS access key id credential\n     * @param {string} secretAccessKey - Your user's AWS secret access key credential\n     * @throws {InvalidArgumentException}\n     */\n    constructor(region: string, accessKeyID: string, secretAccessKey: string) {\n        if (region === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS region; reason: should be a non empty string'\n            )\n        }\n\n        if (accessKeyID === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS access key ID; reason: should be a non empty string'\n            )\n        }\n\n        if (accessKeyID.length < 16 || accessKeyID.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${accessKeyID.length}`\n            )\n        }\n\n        if (secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS secret access key; reason: should be a non empty string'\n            )\n        }\n\n        if (secretAccessKey.length < 16 || secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${secretAccessKey.length}`\n            )\n        }\n\n        this.region = region\n        this.accessKeyID = accessKeyID\n        this.secretAccessKey = secretAccessKey\n    }\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { JSONArray, JSONObject } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { AWSClient, AWSRequest } from './client'\nimport { AWSError } from './error'\nimport { AWSConfig } from './config'\nimport { InvalidSignatureError, URIEncodingConfig } from './signature'\nimport { v4 as uuidv4 } from 'uuid'\nimport { HTTPMethod, HTTPHeaders } from './http'\n\n/**\n * Class allowing to interact with Amazon AWS's KMS service\n */\nexport class KMSClient extends AWSClient {\n    method: HTTPMethod\n    commonHeaders: HTTPHeaders\n\n    /**\n     * Create a KMSClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        const URIencodingConfig = new URIEncodingConfig(true, false)\n        super(awsConfig, 'kms', URIencodingConfig)\n\n        // this.serviceName = 'kms'\n\n        // All interactions with the Secrets Manager service\n        // are made via the GET or POST method.\n        this.method = 'POST'\n\n        this.commonHeaders = {\n            'Accept-Encoding': 'identity',\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n    /**\n     * GenerateDataKey\n     * Used to generate data key with the KMS key defined\n     * @param {string} KeyId\n     * @throws {KMSServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    GenerateDataKey(KeyId: string, NumberOfBytes: number = 32): DataKeyResp | undefined {\n        const body = JSON.stringify({ KeyId: KeyId, NumberOfBytes : NumberOfBytes })\n        const signedRequest: AWSRequest = super.buildRequest(\n            this.method,\n            this.host,\n            '/',\n            '',\n            body,\n            {\n                ...this.commonHeaders,\n                'X-Amz-Target': `TrentService.GenerateDataKey`,\n            }\n        )\n        const res = http.request(this.method, signedRequest.url, body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('GenerateDataKey', res)\n\n        return DataKeyResp.fromJSON(res.json() as JSONObject)\n    }\n    \n    get host() {\n        return `${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n    }\n    \n    // TODO: operation should be an enum\n    _handle_error(operation: string, response: RefinedResponse<ResponseType | undefined>) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new KMSServiceError(errorMessage, error.__type as string, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new KMSServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n// TODO: create a Tags type\n\nexport class DataKeyResp {\n    CiphertextBlob: string\n    KeyId: string\n    Plaintext: string\n\n    constructor(\n        CiphertextBlob: string,\n        KeyId: string,\n        Plaintext: string\n    ){\n        this.CiphertextBlob = CiphertextBlob\n        this.KeyId = KeyId\n        this.Plaintext = Plaintext\n    }\n    static fromJSON(json: JSONObject) {\n        return new DataKeyResp(\n            json.CiphertextBlob as string,\n            json.KeyId as string,\n            json.Plaintext as string\n        )\n    }\n}\n\nexport class KMSServiceError extends AWSError {\n    operation: string\n\n    /**\n     * Constructs a SecretsManagerServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: string) {\n        super(message, code)\n        this.name = 'KMSServiceError'\n        this.operation = operation\n    }\n}\n","import { HTTPMethod, HTTPHeaders } from './http'\nimport { AWSConfig } from './config'\nimport { signHeaders, URIEncodingConfig, toTime } from './signature'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n    URIencodingConfig: URIEncodingConfig\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string, URIencodingConfig: URIEncodingConfig) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n        this.URIencodingConfig = URIencodingConfig\n    }\n\n    buildRequest(\n        method: HTTPMethod,\n        host: string,\n        path: string,\n        queryString: string,\n        body: string | ArrayBuffer,\n        headers: HTTPHeaders\n    ): AWSRequest {\n        const requestTimestamp: number = Date.now()\n        const date: string = toTime(requestTimestamp)\n\n        headers['Host'] = host\n        headers['X-Amz-Date'] = date\n\n        headers = signHeaders(\n            // headers\n            headers,\n\n            // requestTimestamp\n            requestTimestamp,\n\n            // method\n            method,\n\n            // path\n            path,\n\n            // querystring\n            queryString,\n\n            // body\n            body,\n\n            // AWS configuration\n            this.awsConfig,\n\n            // AwS target service name\n            this.serviceName,\n\n            // doubleEncoding: S3 does single-encoding of the uri component\n            // pathURIEncoding: S3 manipulates object keys, and forward slashes\n            // shouldn't be URI encoded\n            this.URIencodingConfig\n        )\n\n        // '?' should not be part of the querystring when we sign the headers\n        path = path !== '' ? path : '/'\n        let url = `https://${host}${path}`\n        if (queryString !== '') {\n            url += `?${queryString}`\n        }\n\n        return { url: url, headers: headers }\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AWSError","message","code","name","xmlDocument","doc","parseHTML","find","text","Error","signHeaders","headers","requestTimestamp","method","path","queryString","body","awsConfig","service","URIencodingConfig","derivedSigningKey","secretAccessKey","time","region","kSecret","date","toDate","kDate","hmac","kRegion","kService","deriveSigningKey","canonicalRequest","uri","query","payload","httpRequestMethod","toUpperCase","canonicalURI","length","URIEncode","createCanonicalURI","canonicalQueryString","qs","split","filter","e","map","v","parts","decodeURIComponent","sort","b","localeCompare","parseQueryString","encodeURIComponent","join","createCanonicalQueryString","canonicalHeaders","constructor","entries","values","toLowerCase","trim","Array","isArray","replace","createCanonicalHeaders","signedHeaders","createSignedHeaders","requestPayload","UnsignedPayload","crypto","createCanonicalPayload","createCanonicalRequest","stringToSign","hashedCanonicalRequest","requestDateTime","toTime","credentialScope","createCredentialScope","HashingAlgorithm","createStringToSign","sha256","signature","calculateSignature","authorizationHeader","accessKeyID","InvalidSignatureError","TypeError","keys","letter","c","isNumeric","includes","charCodeAt","toString","URIEncodingConfig","double","this","timestamp","Date","toISOString","substring","AWSConfig","InvalidAWSConfigError","KMSClient","commonHeaders","KeyId","NumberOfBytes","JSON","stringify","signedRequest","host","res","http","url","_handle_error","DataKeyResp","fromJSON","json","serviceName","operation","response","errorCode","error_code","error","errorMessage","Message","__type","KMSServiceError","now","CiphertextBlob","Plaintext"],"sourceRoot":""}