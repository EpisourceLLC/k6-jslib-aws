{"version":3,"file":"aws.min.js","mappings":"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","sources":["webpack://k6-jslib-aws/./src/internal/uuid.js","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/config.js","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.js","webpack://k6-jslib-aws/./src/internal/signature.js","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/client.js","webpack://k6-jslib-aws/./src/internal/s3.js","webpack://k6-jslib-aws/./src/internal/secrets-manager.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.uuid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nvar v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n},{\"./v1\":4,\"./v4\":5}],2:[function(require,module,exports){\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n\n},{}],3:[function(require,module,exports){\n// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\n},{}],4:[function(require,module,exports){\nvar rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n},{\"./lib/bytesToUuid\":2,\"./lib/rng\":3}],5:[function(require,module,exports){\nvar rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n},{\"./lib/bytesToUuid\":2,\"./lib/rng\":3}]},{},[1])(1)\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {string} region - the AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     * @param {string} accessKeyID - Your user's AWS access key id credential\n     * @param {string} secretAccessKey - Your user's AWS secret access key credential\n     * @throws {InvalidArgumentException}\n     */\n    constructor(region, accessKeyID, secretAccessKey) {\n        if (typeof region !== 'string' || region === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS region; reason: should be a non empty string'\n            )\n        }\n\n        if (typeof accessKeyID !== 'string' || accessKeyID === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS access key ID; reason: should be a non empty string'\n            )\n        }\n\n        if (typeof secretAccessKey !== 'string' || secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                'invalid AWS secret access key; reason: should be a non empty string'\n            )\n        }\n\n        this.region = region\n        this.accessKeyID = accessKeyID\n        this.secretAccessKey = secretAccessKey\n    }\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(...params) {\n        super(...params)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string} code - A unique short code representing the error that was emitted\n     */\n    constructor(message, code) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument) {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","'use strict'\n\nimport crypto, { hmac, sha256 } from 'k6/crypto'\nimport { AWSConfig } from './config'\nimport { AWSError } from './error'\n\n/**\n * Includes AWS v4 signing information to the provided HTTP headers object.\n *\n * This function will compute the `Authorization` header signature for the\n * provided request components, and add it to `header`. It will do so by following\n * the procedure detailled AWS' API docs: https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n *\n * The resulting `Authorization` header value is computed for the provided\n * headers object. Thus, any modification of the headers past a call to `signHeaders`\n * would effectively invalidate their signature, and the function should be\n * called again to recompute it.\n *\n * @param  {object} headers - HTTP headers request to sign.\n * @param  {number} requestTimestamp - Timestamp of the request\n * @param  {string} method - HTTP method used\n * @param  {string} path - HTTP request URL's path\n * @param  {string} queryString - HTTP request URL's querystring\n * @param  {string | ArrayBuffer} body - HTTP request's payload\n * @param  {AWSConfig} - AWS configuration\n * @param  {string} service - AWS service name\n * @param  {URIEncodingConfig} - URI encoding configuration\n */\nexport function signHeaders(\n    headers,\n    requestTimestamp,\n    method,\n    path,\n    queryString,\n    body,\n    awsConfig,\n    service,\n    URIencodingConfig\n) {\n    const derivedSigningKey = deriveSigningKey(\n        awsConfig.secretAccessKey,\n        requestTimestamp,\n        awsConfig.region,\n        service\n    )\n\n    const canonicalRequest = createCanonicalRequest(\n        method,\n        path,\n        queryString,\n        headers,\n        body,\n        URIencodingConfig\n    )\n\n    const stringToSign = createStringToSign(\n        requestTimestamp,\n        awsConfig.region,\n        service,\n        sha256(canonicalRequest, 'hex')\n    )\n\n    const credentialScope = createCredentialScope(requestTimestamp, awsConfig.region, service)\n    const signedHeaders = createSignedHeaders(headers)\n    const signature = calculateSignature(derivedSigningKey, stringToSign)\n    const authorizationHeader = `${HashingAlgorithm} Credential=${awsConfig.accessKeyID}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${signature}`\n\n    headers['Authorization'] = authorizationHeader\n\n    return headers\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message, code) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\n/**\n * Calculte the signature for AWS signature version 4\n *\n * @param  {string} derivedSigningKey - dervied signing key as computed by `deriveSigningKey`\n * @param  {string} stringToSign - String to sign as computed by `createStringToSign`\n * @return {string}\n */\nexport function calculateSignature(derivedSigningKey, stringToSign) {\n    return hmac('sha256', derivedSigningKey, stringToSign, 'hex')\n}\n/**\n * Derives the signing key for authenticating requests signed with\n * the Signature version 4 authentication protocol.\n *\n * deriveSigningKey produces a signing key by creating a series of\n * hash-based message authentication codes (HMACs) represented in\n * a binary format.\n *\n * The derived signing key is specific to the date it's made at, as well as\n * the service and region it targets.\n *\n * @param  {string} secretAccessKey - the AWS secret access key to derive the signing key for\n * @param  {number} time - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service. MUST be UTF-8 encoded.\n * @return {string}\n */\nexport function deriveSigningKey(secretAccessKey, time, region, service) {\n    const kSecret = secretAccessKey\n    const date = toDate(time)\n\n    const kDate = hmac('sha256', 'AWS4' + kSecret, date, 'binary')\n    const kRegion = hmac('sha256', kDate, region, 'binary')\n    const kService = hmac('sha256', kRegion, service, 'binary')\n    const kSigning = hmac('sha256', kService, 'aws4_request', 'binary')\n\n    return kSigning\n}\n\n// Hashing Algorithm to use in the signature process\nexport const HashingAlgorithm = 'AWS4-HMAC-SHA256'\n\n/**\n * Certain services, such as S3, allow for unsigned payloads. If\n *  producing a signed canonical request for such service, pass\n *  the `UnsignedPayload` constant value as the payload parameter.\n */\nexport const UnsignedPayload = 'UNSIGNED-PAYLOAD'\n\n/**\n * Create the \"string to sign\" part of the signature Version 4 protocol.\n *\n * The \"string to sign\" includes meta information about your request and\n * about the canonical request that you created with `createCanonicalRequest`.\n * It is used hand in hand with the signing key to create the request signature.\n *\n * @param  {number} requestTimestamp - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service name. MUST be UTF-8 encoded.\n * @param  {string} hashedCanonicalRequest - canonical request as produced by calling the createCanonicalRequest function,\n *     hashed using the SHA256 algorithm (encoded in hexadecimal format).\n * @return {string}\n */\nexport function createStringToSign(requestTimestamp, region, service, hashedCanonicalRequest) {\n    // the request date specified in ISO8601 format: YYYYMMDD'T'HHMMSS'Z'\n    const requestDateTime = toTime(requestTimestamp)\n\n    // The credential scope value, consisting of the date in YYYYMMDD format,\n    // the targeted region, the targeted service, and a termination string.\n    // Note that the region and service MUST be UTF-8 encoded.\n    const credentialScope = createCredentialScope(requestTimestamp, region, service)\n\n    const stringToSign = [\n        // Algorithm\n        HashingAlgorithm,\n\n        // RequestDateTime\n        requestDateTime,\n\n        // CredentialScope\n        credentialScope,\n\n        // HashedCanonicalRequest\n        hashedCanonicalRequest,\n    ].join('\\n')\n\n    return stringToSign\n}\n\n/**\n *\n * Helper function creating a credential scope string to use in the signature\n * version 4 process. A credential scope consists of the date of the request\n * in YYYYMMDD format, the targeted region, the targeted service, and a\n * termination string.\n *\n * Note that the region and service MUST be UTF-8 encoded.\n *\n * @param  {number} requestTimestamp - timestamp of the request\n * @param  {string} region - targeted AWS region. MUST be UTF-8 encoded.\n * @param  {string} service - targeted AWS service name. MUST be UTF-8 encoded.\n * @return {string}\n */\nexport function createCredentialScope(requestTimestamp, region, service) {\n    return [toDate(requestTimestamp), region, service, 'aws4_request'].join('/')\n}\n\n/**\n *  Create a string that includes information from your request\n * in a AWS signature v4 standardized (canonical) format.\n *\n * @param  {string} method - the HTTP request method\n * @param  {string} uri - URI-encoded version of the absolute path component of the URI\n * @param  {string} query - request's query string\n * @param  {Object} headers - all the HTTP headers that you wish to include with the signed request\n * @param  {String | ArrayBuffer} payload -  payload to include as the body of the request\n * @param  {URIEncodingConfig} - URI encoding configuration\n * @return {string}\n */\nexport function createCanonicalRequest(method, uri, query, headers, payload, URIencodingConfig) {\n    const httpRequestMethod = method.toUpperCase()\n    const canonicalURI = createCanonicalURI(uri, URIencodingConfig)\n    const canonicalQueryString = createCanonicalQueryString(query)\n    const canonicalHeaders = createCanonicalHeaders(headers)\n    const signedHeaders = createSignedHeaders(headers)\n    const requestPayload = createCanonicalPayload(payload)\n\n    const canonicalRequest = [\n        httpRequestMethod,\n        canonicalURI,\n        canonicalQueryString,\n        canonicalHeaders,\n        signedHeaders,\n        requestPayload,\n    ].join('\\n')\n\n    return canonicalRequest\n}\n\n/**\n *  Creates the (canonical) URI-encoded version of the\n *  absolute path component of the URI: everything in the URI\n *  from the HTTP host to the question mark character (\"?\")\n *  that begins the query string parameters (if any).\n *\n * @param  {string} uri - URI to canonize\n * @param  {URIEncodingConfig} - URI encoding configuration\n * @return {string} - canonical URL\n */\nexport function createCanonicalURI(uri, URIencodingConfig) {\n    if (uri == '/') {\n        return uri\n    }\n\n    let canonicalURI = uri\n    if (uri[uri.length - 1] == '/' && canonicalURI[canonicalURI.length - 1] != '/') {\n        canonicalURI += '/'\n    }\n\n    canonicalURI = URIEncode(canonicalURI, URIencodingConfig.path)\n\n    return URIencodingConfig.double ? URIEncode(canonicalURI, URIencodingConfig.path) : canonicalURI\n}\n\n/**\n * Creates the canonical form of the request's query\n * string. If the request does not include a query string,\n * provide an empty string.\n *\n * @param  {String | Object} qs - query string to canonize\n * @return {string}\n */\nexport function createCanonicalQueryString(qs) {\n    if (!qs) {\n        return ''\n    }\n\n    if (typeof qs == 'string') {\n        qs = parseQueryString(qs)\n    }\n\n    return Object.keys(qs)\n        .sort()\n        .map((key) => {\n            const values = Array.isArray(qs[key]) ? qs[key] : [qs[key]]\n            return values\n                .sort()\n                .map((val) => encodeURIComponent(key) + '=' + encodeURIComponent(val))\n                .join('&')\n        })\n        .join('&')\n}\n/**\n * Create the canonical form of the request's headers.\n * Canonical headers consist of all the HTTP headers you\n * are including with the signed request.\n *\n * Note that:\n *   * for HTTP/1.1 requests, the headers should at least\n * contain the `host` header.\n *   * for HTTP/2, the `:authority` header must be used instead\n * of `host`.\n *\n * @param  {Object} headers\n * @return {string}\n */\nexport function createCanonicalHeaders(headers) {\n    if (headers.constructor !== Object || Object.entries(headers).length === 0) {\n        return ''\n    }\n\n    const canonicalHeaders = Object.entries(headers)\n        .map(([name, values]) => {\n            const canonicalName = name.toLowerCase().trim()\n            const normalizedValues = Array.isArray(values) ? values : [values]\n\n            // Note that we do not need to sort values\n            const canonicalValues = normalizedValues\n                .map((v) => {\n                    // convert sequential spaces to a single space\n                    return v.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '')\n                })\n                .join(',') // standard for multiple values in a HTTP header\n\n            return canonicalName + ':' + canonicalValues + '\\n'\n        })\n        .sort()\n        .join('')\n\n    return canonicalHeaders\n}\n\n/**\n * Create the canonical request's signed headers.\n *\n * The signed headers part of the request contains the\n * list of headers included in the request's signing process.\n *\n * Note that:\n *   * for HTTP/1.1 requests, the `host` header must be included.\n *   * for HTTP/2 requests, the `:authority` header must be included instead\n *   of host.\n *   * if used, the `x-amz-date` header must be included.\n *\n * @param  {Object} headers\n * @return {string}\n * @throws {TypeError} - on headers not being an Object, or being empty.\n */\nexport function createSignedHeaders(headers) {\n    if (headers.constructor !== Object) {\n        throw new TypeError('headers should be an object')\n    }\n\n    if (Object.entries(headers).length === 0) {\n        throw 'headers should at least contain either the Host (HTTP 1.1) or :authority (HTTP 2) parameter'\n    }\n\n    // To create the signed headers list, convert\n    // all header names to lowercase, sort them by\n    // character code, and use a semicolon to separate\n    // the header names.\n    const result = Object.keys(headers)\n        .map((name) => name.toLowerCase().trim())\n        .sort()\n        .join(';')\n\n    return result\n}\n\n/**\n * Create the canonical form of the request's payload.\n *\n * The canonical payload consists in a lowercased, hex encoded,\n * SHA256 hash of the requests body/payload.\n *\n * Certain services, such as S3, allow for unsigned payload. If\n * producing a signed canonical request for such service, pass\n * the `UnsignedPayload` constant value as the payload parameter.\n *\n * @param  {String | ArrayBuffer} payload\n * @return {string}\n */\nexport function createCanonicalPayload(payload) {\n    if (payload === UnsignedPayload) {\n        return payload\n    }\n\n    // Note that if the paylaod is null, we convert it\n    // to an empty string.\n    // TODO: Should switching to empty string if null impact headers?\n    return crypto.sha256(payload || '', 'hex').toLowerCase()\n}\n\n/**\n * URIEncodes encodes every bytes of a URI to be URL-safe.\n *\n * This implementation is specific to AWS; who intended to make it as\n * close as possible to the underlying RFC 3946. It:\n *   * URI encode every byte except the unreserved characters: 'A'-'Z', 'a'-'z', '0'-'9',\n *     '-', '.', '_', and '~'.\n *   * considers the space character as a reserved character and must URI encodes\n *     encodes it as \"%20\" (and not as \"+\").\n *   * URI encodes every byte by prefixing with '%' the two-digit hexadecimal value of the byte.\n *   * If the `path` argument is set, forward slashes are not encoded, to fit with\n *     S3 requirements.\n *\n * N.B: this implementation differs with ES6' mainly in that it does\n * encode the \"'\" character.\n *\n * Based on AWS implementation: https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/util/SdkHttpUtils.java#L66\n * Encoding specs: https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\n *\n * @param {string} uri - uri to encode\n * @param {boolean} path - slash characters should be encoded everywhere,\n *     but in paths, set to false when encoding a path\n * @return {string} the URI encoded result\n */\nexport function URIEncode(uri, path) {\n    if (uri == '') {\n        return uri\n    }\n\n    return uri\n        .split('') // to be able to map over a string, because... javascript...\n        .map((letter) => {\n            if (isAlpha(letter) || isNumeric(letter) || '-._~'.includes(letter)) {\n                return letter\n            }\n\n            // Space should be explicitly encoded to as %20.\n            if (letter == ' ') {\n                return '%20'\n            }\n\n            // If the URI is a path, the forward slash shouldn't\n            // be encoded.\n            if (letter == '/' && path) {\n                return '/'\n            }\n\n            return '%' + letter.charCodeAt(0).toString(16).toUpperCase()\n        })\n        .join('')\n}\n\n/**\n * Class holding URI encoding configuration\n */\nexport class URIEncodingConfig {\n    /**\n     *\n     * @param {boolean} double - should the URI be double encoded?\n     * @param {boolean} path - is the URI a path? If so, its forward\n     *     slashes won't be URIencoded.\n     */\n    constructor(double, path) {\n        this.double = double\n        this.path = path\n    }\n}\n\n/**\n * Compute the request time value as specified by the ISO8601\n * format: YYYYMMDD'T'HHMMSS'Z'\n *\n * @param  {number} timestamp\n * @return {string}\n */\nexport function toTime(timestamp) {\n    return new Date(timestamp).toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\n}\n/**\n * Computethe request date value in the format: YYYMMDD\n *\n * @param  {number} timestamp\n * @return {string}\n */\nexport function toDate(timestamp) {\n    return toTime(timestamp).substring(0, 8)\n}\n/**\n * Parse a HTTP request URL's querystring into an object\n * containing its `key=value` pairs.\n *\n * @param  {string} qs\n * @return {object}\n */\nexport function parseQueryString(qs) {\n    if (typeof qs !== 'string' || qs.length === 0) {\n        return {}\n    }\n\n    var result = {}\n    var split = qs.split('&').filter((e) => e) // filter drops empty elements\n\n    for (let i = 0; i < split.length; i++) {\n        let parts = split[i].split('=')\n\n        if (parts.length === 2) {\n            result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1])\n        } else {\n            result[decodeURIComponent(split[i])] = ''\n        }\n    }\n\n    return result\n}\n\nfunction isAlpha(c) {\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')\n}\n\nfunction isNumeric(c) {\n    return c >= '0' && c <= '9'\n}\n\n// FIXME: finish implementation when needed\n// See the following for more details:\n//   * https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n//   * https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n// export function signQueryString(\n// queryString,\n// requestTimestamp,\n// accessKeyID,\n// secretAccessKey,\n// region,\n// service,\n// ttl, // in seconds\n// headers,\n// doubleURIEncoding = true\n// ) {\n// const credential = [accessKeyID, toDate(requestTimestamp), region, service].join('/')\n//\n// const canonicalRequest = createCanonicalRequest(\n// method,\n// path,\n// queryString,\n// headers,\n// body,\n// doubleURIEncoding\n// )\n//\n// const derivedSigningKey = deriveSigningKey(secretAccessKey, requestTimestamp, region, service)\n//\n// const stringToSign = createStringToSign(\n// requestTimestamp,\n// region,\n// service,\n// sha256(canonicalRequest, 'hex')\n// )\n//\n// const signedHeaders = createSignedHeaders(headers)\n// const signature = calculateSignature(derivedSigningKey, stringToSign)\n//\n// return [\n// `X-Amz-Algorithm=${HashingAlgorithm}`,\n// `X-Amz-Credential=${crediental}`,\n// `X-Amz-Date=${toTime(requestTimestamp)}`,\n// `X-Amz-Expires=${ttl}`,\n// `X-Amz-SignedHeaders=${signedHeaders}`,\n// `X-Amz-Signature=${signature}`,\n//`X-Amz-Security-Token=`,  // TODO: optional\n// ].join('&')\n// }\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { signHeaders, toTime } from './signature.js'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig, serviceName, URIencodingConfig) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n        this.URIencodingConfig = URIencodingConfig\n    }\n\n    buildRequest(method, host, path, queryString, body, headers) {\n        const requestTimestamp = Date.now()\n        const date = toTime(requestTimestamp)\n\n        headers['Host'] = host\n        headers['X-Amz-Date'] = date\n\n        headers = signHeaders(\n            // headers\n            headers,\n\n            // requestTimestamp\n            requestTimestamp,\n\n            // method\n            method,\n\n            // path\n            path,\n\n            // querystring\n            queryString,\n\n            // body\n            body,\n\n            // AWS configuration\n            this.awsConfig,\n\n            // AwS target service name\n            this.serviceName,\n\n            // doubleEncoding: S3 does single-encoding of the uri component\n            // pathURIEncoding: S3 manipulates object keys, and forward slashes\n            // shouldn't be URI encoded\n            this.URIencodingConfig\n        )\n\n        // '?' should not be part of the querystring when we sign the headers\n        path = path !== '' ? path : '/'\n        let url = `https://${host}${path}`\n        if (queryString !== '') {\n            url += `?${queryString}`\n        }\n\n        return { url: url, headers: headers }\n    }\n}\n","import http from 'k6/http'\nimport { parseHTML } from 'k6/html'\nimport { sha256 } from 'k6/crypto'\n\nimport { signHeaders, InvalidSignatureError, URIEncodingConfig, toTime } from './signature.js'\nimport { AWSClient } from './client.js'\nimport { AWSError } from './error.js'\nimport { AWSConfig } from './config.js'\n\n/** Class allowing to interact with Amazon AWS's S3 service */\nexport class S3Client extends AWSClient {\n    /**\n     * Create a S3Client\n     *\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig) {\n        const URIencodingConfig = new URIEncodingConfig(false, true)\n        super(awsConfig, 's3', URIencodingConfig)\n    }\n\n    /**\n     * Returns a list of all buckets owned by the authenticated sender of the request.\n     * To use this operation, you must have the s3:ListAllMyBuckets permission.\n     *\n     * @return  {Array.<S3Bucket>} buckets - An array of objects describing S3 buckets\n     *     with the following fields: name, and creationDate.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    listBuckets() {\n        // Prepare request\n        const method = 'GET'\n        const host = `${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n        const body = ''\n        const { url, headers } = super.buildRequest(method, host, '/', '', body, {\n            'X-Amz-Content-SHA256': sha256(body, 'hex'),\n        })\n\n        const res = http.request(method, url, body, { headers: headers })\n        this._handle_error(res.error_code, res.error, res.body)\n\n        let buckets = []\n\n        const doc = parseHTML(res.body)\n\n        doc.find('Buckets')\n            .children()\n            .each((_, bucketDefinition) => {\n                let bucket = new S3Bucket()\n\n                bucketDefinition.children().forEach((child) => {\n                    switch (child.nodeName()) {\n                        case 'name':\n                            Object.assign(bucket, { name: child.textContent() })\n                        case 'creationdate':\n                            const parsed = Date.parse(\n                                child.textContent(),\n                                'YYYY-MM-ddTHH:mm:ss.sssZ'\n                            )\n                            Object.assign(bucket, { creationDate: parsed })\n                    }\n                })\n\n                buckets.push(bucket)\n            })\n\n        return buckets\n    }\n\n    /**\n     * Returns some or all (up to 1,000) of the objects in a bucket.\n     *\n     * @param  {string} bucketName - Bucket name to list.\n     * @param  {string} prefix='' - Limits the response to keys that begin with the specified prefix.\n     * @return {Array.<S3Object>} - returns an array of objects describing S3 objects\n     *     with the following fields: key, lastModified, etag, size and storageClass.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    listObjects(bucketName, prefix = '') {\n        // Prepare request\n        const method = 'GET'\n        const host = `${bucketName}.${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n        const body = ''\n        const { url, headers } = super.buildRequest(method, host, '/', 'list-type=2', body, {\n            'X-Amz-Content-SHA256': sha256(body, 'hex'),\n        })\n\n        const res = http.request(method, url, body, { headers: headers })\n        this._handle_error(res.error_code, res.error, res.body)\n\n        let objects = []\n\n        // Extract the objects definition from\n        // the XML response\n        parseHTML(res.body)\n            .find('Contents')\n            .each((_, objectDefinition) => {\n                let obj = new S3Object()\n\n                objectDefinition.children().forEach((child) => {\n                    switch (child.nodeName()) {\n                        case 'key':\n                            Object.assign(obj, { key: child.textContent() })\n                        case 'lastmodified':\n                            const parsed = Date.parse(\n                                child.textContent(),\n                                'YYYY-MM-ddTHH:mm:ss.sssZ'\n                            )\n                            Object.assign(obj, { lastModified: parsed })\n                        case 'etag':\n                            Object.assign(obj, { etag: child.textContent() })\n                        case 'size':\n                            Object.assign(obj, { size: parseInt(child.textContent()) })\n                        case 'storageclass':\n                            Object.assign(obj, { storageClass: child.textContent() })\n                    }\n                })\n\n                objects.push(obj)\n            })\n\n        return objects\n    }\n    /**\n     * Retrieves an Object from Amazon S3.\n     *\n     * To use getObject, you must have `READ` access to the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to get.\n     * @return {S3Object} - returns the content of the fetched S3 Object.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    getObject(bucketName, objectKey) {\n        // Prepare request\n        const method = 'GET'\n        const host = `${bucketName}.${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n        const path = `/${objectKey}`\n        const body = ''\n        const { url, headers } = super.buildRequest(method, host, path, '', body, {\n            'X-Amz-Content-SHA256': sha256(body, 'hex'),\n        })\n\n        const res = http.request(method, url, body, { headers: headers })\n        this._handle_error(res.error_code, res.error, res.body)\n\n        return new S3Object(\n            objectKey,\n            res.headers['Last-Modified'],\n            res.headers['ETag'],\n            res.headers['Content-Length'],\n            '', // GetObject response doesn't contain the storage class\n            res.body\n        )\n    }\n    /**\n     * Adds an object to a bucket.\n     *\n     * You must have WRITE permissions on a bucket to add an object to it.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to put.\n     * @param  {string | ArrayBuffer} data - the content of the S3 Object to upload.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    putObject(bucketName, objectKey, data) {\n        // Prepare request\n        const method = 'PUT'\n        const host = `${bucketName}.${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n        const path = `/${objectKey}`\n        const queryString = ''\n        const body = data\n        const { url, headers } = super.buildRequest(method, host, path, queryString, body, {\n            'X-Amz-Content-SHA256': sha256(body, 'hex'),\n        })\n\n        const res = http.request(method, url, body, { headers: headers })\n        this._handle_error(res.error_code, res.error, res.body)\n    }\n\n    /**\n     * Removes the null version (if there is one) of an object and inserts a delete marker,\n     * which becomes the latest version of the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to delete.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    deleteObject(bucketName, objectKey) {\n        // Prepare request\n        const method = 'DELETE'\n        const host = `${bucketName}.${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n        const path = `/${objectKey}`\n        const queryString = ''\n        const body = ''\n        const { url, headers } = super.buildRequest(method, host, path, queryString, body, {\n            'X-Amz-Content-SHA256': sha256(body, 'hex'),\n        })\n\n        const res = http.request(method, url, body, { headers: headers })\n        this._handle_error(res.error_code, res.error, res.body)\n    }\n\n    // FIXME: remove dependency to `error_message`\n    // FIXME: just pass it the response?\n    _handle_error(error_code, error_message, error_body) {\n        if (error_message == '' || error_code === 0) {\n            return\n        }\n\n        // FIXME: should be error_code === 1301 instead\n        // See: https://github.com/grafana/k6/issues/2474\n        // See: https://github.com/golang/go/issues/49281\n        if (error_message && error_message.startsWith('301')) {\n            // Bucket not found\n            throw new S3ServiceError('Resource not found', 'ResourceNotFound', 'getObject')\n        }\n\n        const awsError = AWSError.parseXML(error_body)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw new S3ServiceError(awsError.message, awsError.code, 'listObjects')\n        }\n    }\n}\n\n/** Class representing a S3 Bucket */\nexport class S3Bucket {\n    /**\n     * Create an S3 Bucket\n     *\n     * @param  {string} name - S3 bucket's name\n     * @param  {Date} creationDate - S3 bucket's creation date\n     */\n    constructor(name, creationDate) {\n        this.name = name\n        this.creationDate = creationDate\n    }\n}\n\n/** Class representing an S3 Object */\nexport class S3Object {\n    /**\n     * Create an S3 Object\n     *\n     * @param  {string} key - S3 object's key\n     * @param  {Date} lastModified - S3 object last modification date\n     * @param  {string} etag - S3 object's etag\n     * @param  {number} size - S3 object's size\n     * @param  {string} storageClass - S3 object's storage class\n     * @param  {string} data=null - S3 Object's data\n     */\n    constructor(key, lastModified, etag, size, storageClass, data = null) {\n        this.key = key\n        this.lastModified = lastModified\n        this.etag = etag\n        this.size = size\n        this.storageClass = storageClass || ''\n        this.data = data\n    }\n}\n\n/**\n * Error indicating a S3 operation failed\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class S3ServiceError extends AWSError {\n    /**\n     * Constructs a S3ServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message, code, operation) {\n        super(message, code)\n        this.name = 'S3ServiceError'\n        this.operation = operation\n    }\n}\n","import http, { head } from 'k6/http'\nimport { AWSClient } from './client.js'\nimport { AWSError } from './error.js'\nimport { InvalidSignatureError, URIEncodingConfig } from './signature.js'\nimport { v4 as uuidv4 } from './uuid.js'\n\n/**\n * Class allowing to interact with Amazon AWS's SecretsManager service\n */\nexport class SecretsManagerClient extends AWSClient {\n    /**\n     * Create a SecretsManagerClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig) {\n        const URIencodingConfig = new URIEncodingConfig(true, false)\n        super(awsConfig, 'secretsmanager', URIencodingConfig)\n\n        // this.serviceName = 'secretsmanager'\n\n        // All interactions with the Secrets Manager service\n        // are made via the GET or POST method.\n        this.method = 'POST'\n\n        this.commonHeaders = {\n            'Accept-Encoding': 'identity',\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Returns a list of all secrets owned by the authenticated sender of the request.\n     * To use this operation, you must have the secretsmanager:ListSecrets permission.\n     *\n     * @return  {Array.<Secret>} secrets - An array of objects describing Secret Manager's secrets\n     * @throws  {SecretsManagerServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    listSecrets() {\n        const body = JSON.stringify({})\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        const { url, headers } = super.buildRequest(this.method, this.host, '/', '', body, {\n            ...this.commonHeaders,\n            'X-Amz-Target': `${this.serviceName}.ListSecrets`,\n        })\n\n        const res = http.request(this.method, url, body, { headers: headers })\n        this._handle_error('ListSecrets', res)\n\n        return res.json('SecretList').map((s) => Secret.fromJSON(s))\n    }\n\n    /**\n     * Retrieves a secret from Amazon Sercets Manager\n     *\n     * @param {string} secretID - The ARN or name of the secret to retrieve.\n     * @returns {Secret} - returns the content of the fetched Secret object.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    getSecret(secretID) {\n        const body = JSON.stringify({ SecretId: secretID })\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        const { url, headers } = super.buildRequest(this.method, this.host, '/', '', body, {\n            ...this.commonHeaders,\n            'X-Amz-Target': `${this.serviceName}.GetSecretValue`,\n        })\n\n        const res = http.request(this.method, url, body, { headers: headers })\n        this._handle_error('GetSecretValue', res)\n\n        return Secret.fromJSON(res.json())\n    }\n\n    /**\n     * Creates a new secret\n     *\n     * Note that this method only supports string-based values at the moment.\n     *\n     * @param  {string} name - The name of the new secret.\n     *     The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@\n     * @param  {string} secretString - The text data to encrypt and store in this new version of the secret.\n     * @param  {string} description - The description of the secret.\n     * @param  {string} versionID=null - Version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     *     algorithm.\n     * @param  {Array.<Object>} tags=[] - A list of tags to attach to the secret. Each tag is a key and\n     *     value pair of strings in a JSON text string. Note that tag key names are case sensitive.\n     * @returns {Secret} - returns the created secret\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    createSecret(name, secretString, description, versionID = null, tags = []) {\n        versionID = versionID || uuidv4()\n\n        const body = JSON.stringify({\n            Name: name,\n            Description: description,\n            SecretString: secretString,\n            ClientRequestToken: versionID,\n            Tags: tags,\n        })\n\n        const { url, headers } = super.buildRequest(this.method, this.host, '/', '', body, {\n            ...this.commonHeaders,\n            'X-Amz-Target': `${this.serviceName}.CreateSecret`,\n        })\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        // headers['X-Amz-Target'] = `${this.serviceName}.CreateSecret`\n\n        const res = http.request(this.method, url, body, { headers: headers })\n        this._handle_error('CreateSecret', res)\n\n        return Secret.fromJSON(res.json())\n    }\n    /**\n     * Update a secret's value.\n     *\n     * Note that this method only support string-based values at the moment.\n     *\n     * @param  {string} secretID - The ARN or name of the secret to update.\n     * @param  {string} secretString - The text data to encrypt and store in this new version of the secret.\n     * @param  {} versionID=null  - A unique identifier for the new version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    putSecretValue(secretID, secretString, versionID = null) {\n        versionID = versionID || uuidv4()\n\n        const body = JSON.stringify({\n            SecretId: secretID,\n            SecretString: secretString,\n            ClientRequestToken: versionID,\n        })\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        const { url, headers } = super.buildRequest(this.method, this.host, '/', '', body, {\n            ...this.commonHeaders,\n            'X-Amz-Target': `${this.serviceName}.PutSecretValue`,\n        })\n\n        const res = http.request(this.method, url, body, { headers: headers })\n        this._handle_error('PutSecretValue', res)\n\n        return Secret.fromJSON(res.json())\n    }\n\n    /**\n     * Deletes a secret and all of its versions.\n     *\n     * You can specify a recovery window during which you can restore the secret.\n     * The minimum recovery window is 7 days. The default recovery window is 30 days.\n     *\n     * @param {string} secretID - The ARN or name of the secret to delete.\n     * @param {number} recoveryWindow - The number of days from 7 to 30 that Secrets Manager\n     *     waits before permanently deleting the secret.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    deleteSecret(secretID, { recoveryWindow = 30, noRecovery = false }) {\n        const payload = {\n            SecretId: secretID,\n        }\n\n        // noRecovery and recoveryWindow are exclusive parameters\n        if (noRecovery === true) {\n            payload['ForceDeleteWithoutRecovery'] = true\n        } else {\n            payload['RecoveryWindowInDays'] = recoveryWindow\n        }\n\n        const body = JSON.stringify(payload)\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        const { url, headers } = super.buildRequest(this.method, this.host, '/', '', body, {\n            ...this.commonHeaders,\n            'X-Amz-Target': `${this.serviceName}.DeleteSecret`,\n        })\n\n        const res = http.request(this.method, url, body, { headers: headers })\n        this._handle_error('DeleteSecret', res)\n    }\n\n    get host() {\n        return `${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n    }\n\n    _handle_error(operation, response) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json()\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage = error.Message || error.message || error.__type\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new SecretsManagerError(errorMessage, error.__type, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new SecretsManagerError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n/**\n * Class representing a Secret Manager's secret\n */\nexport class Secret {\n    /**\n     * Constructs a Secret Manager's Secret\n     *\n     * @param  {string} name - The friendly name of the secret.\n     * @param  {string} arn - The ARN of the secret.\n     * @param  {number} createdDate - The date and time that this version of the secret was created.\n     * @param  {number} lastAccessedDate - The last date that this secret was accessed. This value is\n     *     truncated to midnight of the date and therefore shows only the date, not the time.\n     * @param  {number} lastChangedDate - The last date and time that this secret was modified in any way.\n     * @param  {Array.<Object>} tags - The list of user-defined tags associated with the secret.\n     */\n    constructor(\n        name,\n        arn,\n        secretString,\n        createdDate,\n        lastAccessedDate,\n        lastChangedDate,\n        tags = []\n    ) {\n        this.name = name\n        this.arn = arn\n        this.secretString = secretString\n        this.createdDate = createdDate\n        this.lastAccessedDate = lastAccessedDate\n        this.lastChangedDate = lastChangedDate\n        this.tags = tags\n    }\n\n    /**\n     * Parses and constructs a Secret Manager's Secret from the content\n     * of a JSON response returned by the AWS service\n     *\n     * @param  {Object} json - JSON object as returned and parsed from\n     *     the AWS service's API call.\n     * @returns {Secret}\n     */\n    static fromJSON(json) {\n        return new Secret(\n            json.Name,\n            json.ARN,\n            json.SecretString,\n            json.CreatedDate,\n            json.LastAccessedDate,\n            json.LastChangeddAt,\n            json.Tags\n        )\n    }\n}\n\n// TODO: derive a AWSServiceError to extend instead? (to save kb of code?)\nexport class SecretsManagerError extends AWSError {\n    /**\n     * Constructs a SecretsManagerError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message, code, operation) {\n        super(message, code)\n        this.name = 'SecretsManagerServiceError'\n        this.operation = operation\n    }\n}\n"],"names":["f","r","e","n","t","o","i","u","a","Error","code","p","exports","call","length","require","module","v1","v4","uuid","byteToHex","toString","substr","buf","offset","bth","join","getRandomValues","crypto","bind","msCrypto","window","rnds8","Uint8Array","rnds","Array","Math","random","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","options","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","tl","tmh","ii","define","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","definition","key","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","AWSConfig","region","accessKeyID","secretAccessKey","InvalidAWSConfigError","this","params","AWSError","message","name","xmlDocument","doc","parseHTML","find","text","signHeaders","headers","requestTimestamp","method","path","queryString","body","awsConfig","service","URIencodingConfig","derivedSigningKey","time","kSecret","date","toDate","kDate","hmac","kRegion","kService","deriveSigningKey","canonicalRequest","uri","query","payload","httpRequestMethod","toUpperCase","canonicalURI","URIEncode","createCanonicalURI","canonicalQueryString","qs","result","split","filter","parts","decodeURIComponent","parseQueryString","keys","sort","map","isArray","val","encodeURIComponent","createCanonicalQueryString","canonicalHeaders","constructor","entries","values","toLowerCase","trim","v","replace","createCanonicalHeaders","signedHeaders","createSignedHeaders","requestPayload","UnsignedPayload","createCanonicalPayload","createCanonicalRequest","stringToSign","hashedCanonicalRequest","requestDateTime","toTime","credentialScope","createCredentialScope","HashingAlgorithm","createStringToSign","sha256","signature","calculateSignature","authorizationHeader","InvalidSignatureError","TypeError","letter","c","isNumeric","includes","charCodeAt","URIEncodingConfig","double","timestamp","toISOString","substring","AWSClient","serviceName","host","now","url","S3Client","res","http","_handle_error","error_code","error","buckets","children","each","_","bucketDefinition","bucket","S3Bucket","forEach","child","nodeName","assign","textContent","parsed","parse","creationDate","push","bucketName","objects","objectDefinition","S3Object","lastModified","etag","size","parseInt","storageClass","objectKey","data","error_message","error_body","startsWith","S3ServiceError","awsError","parseXML","operation","SecretsManagerClient","commonHeaders","JSON","stringify","json","s","Secret","fromJSON","secretID","SecretId","secretString","description","versionID","tags","uuidv4","Name","Description","SecretString","ClientRequestToken","Tags","recoveryWindow","noRecovery","response","errorCode","errorMessage","Message","__type","SecretsManagerError","arn","createdDate","lastAccessedDate","lastChangedDate","ARN","CreatedDate","LastAccessedDate","LastChangeddAt"],"sourceRoot":""}