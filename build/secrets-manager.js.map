{"version":3,"file":"secrets-manager.js","mappings":"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","sources":["webpack://k6-jslib-aws/./node_modules/uuid/index.js","webpack://k6-jslib-aws/./node_modules/uuid/lib/bytesToUuid.js","webpack://k6-jslib-aws/./node_modules/uuid/lib/rng-browser.js","webpack://k6-jslib-aws/./node_modules/uuid/v1.js","webpack://k6-jslib-aws/./node_modules/uuid/v4.js","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/secrets-manager.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const urlObj = new URL(value)\n        this._protocol = urlObj.protocol.slice(0, -1) // remove the trailing colon\n        this._hostname = urlObj.hostname\n        this._port = urlObj.port ? parseInt(urlObj.port) : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    // endpoint: string = 'amazonaws.com'\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const scheme: HTTPScheme | undefined = options?.scheme\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            scheme: scheme,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    // endpoint?: string\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { JSONArray, JSONObject } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { v4 as uuidv4 } from 'uuid'\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AMZ_TARGET_HEADER } from './constants'\nimport { AWSError } from './error'\nimport { HTTPHeaders, HTTPMethod } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n/**\n * Class allowing to interact with Amazon AWS's SecretsManager service\n */\nexport class SecretsManagerClient extends AWSClient {\n    /**\n     * HTTP Method to use when interacting with the Secrets Manager service.\n     */\n    method: HTTPMethod\n\n    /**\n     * HTTP headers to use accross all requests to the Secrets Manager service.\n     */\n    commonHeaders: HTTPHeaders\n\n    signature: SignatureV4\n\n    /**\n     * Create a SecretsManagerClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'secretsmanager')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: true,\n            applyChecksum: false,\n        })\n\n        // All interactions with the Secrets Manager service\n        // are made via the GET or POST method.\n        this.method = 'POST'\n        this.commonHeaders = {\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Returns a list of all secrets owned by the authenticated sender of the request.\n     * To use this operation, you must have the secretsmanager:ListSecrets permission.\n     *\n     * @return  {Array.<Secret>} secrets - An array of objects describing Secret Manager's secrets\n     * @throws  {SecretsManagerServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async listSecrets(): Promise<Array<Secret>> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.ListSecrets`,\n                },\n                body: JSON.stringify({}),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.ListSecrets, res)\n        const json: JSONArray = res.json('SecretList') as JSONArray\n\n        return json.map((s) => Secret.fromJSON(s as JSONObject))\n    }\n\n    /**\n     * Retrieves a secret from Amazon Sercets Manager\n     *\n     * @param {string} id - The ARN or name of the secret to retrieve.\n     * @returns {Secret} - returns the content of the fetched Secret object.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async getSecret(id: string): Promise<Secret | undefined> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.GetSecretValue`,\n                },\n                body: JSON.stringify({ SecretId: id }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n\n        this._handle_error(SecretsManagerOperation.GetSecretValue, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n\n    /**\n     * Creates a new secret\n     *\n     * Note that this method only supports string-based values at the moment.\n     *\n     * @param  {string} name - The name of the new secret.\n     *     The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@\n     * @param  {string} secret - The text data to encrypt and store in this new version of the secret.\n     * @param  {string} description - The description of the secret.\n     * @param  {string} versionID=null - Version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     *     algorithm.\n     * @param  {Array.<Object>} tags=[] - A list of tags to attach to the secret. Each tag is a key and\n     *     value pair of strings in a JSON text string. Note that tag key names are case sensitive.\n     * @returns {Secret} - returns the created secret\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async createSecret(\n        name: string,\n        secret: string,\n        description: string,\n        versionID?: string,\n        tags?: Array<Object>\n    ): Promise<Secret> {\n        versionID = versionID || uuidv4()\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.CreateSecret`,\n                },\n                body: JSON.stringify({\n                    Name: name,\n                    Description: description,\n                    SecretString: secret,\n                    ClientRequestToken: versionID,\n                    Tags: tags,\n                }),\n            },\n            {}\n        )\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        // headers['X-Amz-Target'] = `${this.serviceName}.CreateSecret`\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.CreateSecret, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n    /**\n     * Update a secret's value.\n     *\n     * Note that this method only support string-based values at the moment.\n     *\n     * @param  {string} id - The ARN or name of the secret to update.\n     * @param  {string} secret - The text data to encrypt and store in this new version of the secret.\n     * @param  {} versionID=null  - A unique identifier for the new version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async putSecretValue(id: string, secret: string, versionID?: string): Promise<Secret> {\n        versionID = versionID || uuidv4()\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.PutSecretValue`,\n                },\n                body: JSON.stringify({\n                    SecretId: id,\n                    SecretString: secret,\n                    ClientRequestToken: versionID,\n                }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.PutSecretValue, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n\n    /**\n     * Deletes a secret and all of its versions.\n     *\n     * You can specify a recovery window during which you can restore the secret.\n     * The minimum recovery window is 7 days. The default recovery window is 30 days.\n     *\n     * @param {string} secretID - The ARN or name of the secret to delete.\n     * @param {number} recoveryWindow - The number of days from 7 to 30 that Secrets Manager\n     *     waits before permanently deleting the secret.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async deleteSecret(\n        id: string,\n        { recoveryWindow = 30, noRecovery = false }: { recoveryWindow: number; noRecovery: boolean }\n    ): Promise<void> {\n        const payload: { [key: string]: string | boolean | number } = {\n            SecretId: id,\n        }\n\n        // noRecovery and recoveryWindow are exclusive parameters\n        if (noRecovery === true) {\n            payload['ForceDeleteWithoutRecovery'] = true\n        } else {\n            payload['RecoveryWindowInDays'] = recoveryWindow\n        }\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.DeleteSecret`,\n                },\n                body: JSON.stringify(payload),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.DeleteSecret, res)\n    }\n\n    _handle_error(\n        operation: SecretsManagerOperation,\n        response: RefinedResponse<ResponseType | undefined>\n    ) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new SecretsManagerServiceError(errorMessage, error.__type as string, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new SecretsManagerServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n// TODO: create a Tags type\n\n/**\n * Class representing a Secret Manager's secret\n */\nexport class Secret {\n    name: string\n    arn: string\n    secret: string\n    createdDate: number\n    lastAccessedDate: number\n    lastChangedDate: number\n    tags: Array<{ [key: string]: string }>\n\n    /**\n     * Constructs a Secret Manager's Secret\n     *\n     * @param  {string} name - The friendly name of the secret.\n     * @param  {string} arn - The ARN of the secret.\n     * @param  {number} createdDate - The date and time that this version of the secret was created.\n     * @param  {number} lastAccessedDate - The last date that this secret was accessed. This value is\n     *     truncated to midnight of the date and therefore shows only the date, not the time.\n     * @param  {number} lastChangedDate - The last date and time that this secret was modified in any way.\n     * @param  {Array.<Object>} tags - The list of user-defined tags associated with the secret.\n     */\n    constructor(\n        name: string,\n        arn: string,\n        secretString: string,\n        createdDate: number,\n        lastAccessedDate: number,\n        lastChangedDate: number,\n        tags: Array<{ [key: string]: string }> = []\n    ) {\n        this.name = name\n        this.arn = arn\n        this.secret = secretString\n        this.createdDate = createdDate\n        this.lastAccessedDate = lastAccessedDate\n        this.lastChangedDate = lastChangedDate\n        this.tags = tags\n    }\n\n    /**\n     * Parses and constructs a Secret Manager's Secret from the content\n     * of a JSON response returned by the AWS service\n     *\n     * @param  {Object} json - JSON object as returned and parsed from\n     *     the AWS service's API call.\n     * @returns {Secret}\n     */\n    static fromJSON(json: JSONObject) {\n        return new Secret(\n            json.Name as string,\n            json.ARN as string,\n            json.SecretString as string,\n            json.CreatedDate as number,\n            json.LastAccessedDate as number,\n            json.LastChangedDate as number,\n            json.Tags as Array<{ [key: string]: string }>\n        )\n    }\n}\n\nexport class SecretsManagerServiceError extends AWSError {\n    operation: SecretsManagerOperation\n\n    /**\n     * Constructs a SecretsManagerServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: SecretsManagerOperation) {\n        super(message, code)\n        this.name = 'SecretsManagerServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n *  SecretsManagerOperation defines all currently implemented Secrets Manager Service operations.\n */\nenum SecretsManagerOperation {\n    ListSecrets = 'ListSecrets',\n    GetSecretValue = 'GetSecretValue',\n    CreateSecret = 'CreateSecret',\n    PutSecretValue = 'PutSecretValue',\n    DeleteSecret = 'DeleteSecret',\n}\n","import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n"],"names":["v1","v4","uuid","module","exports","byteToHex","i","toString","substr","buf","offset","bth","join","getRandomValues","crypto","bind","window","msCrypto","rnds8","Uint8Array","rnds","Array","r","Math","random","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","options","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","n","ii","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Endpoint","endpoint","_classCallCheck","_defineProperty","completeUrl","startsWith","concat","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","this","_protocol","slice","_hostname","_port","parseInt","href","set","_value$split2","hostname","port","protocol","host","urlObj","URL","AWSConfig","region","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","scheme","_Error","_inherits","_super","_createSuper","message","_wrapNativeSuper","require","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TARGET_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headers","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","target","source","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","instance","Constructor","_defineProperties","props","descriptor","_toPropertyKey","protoProps","staticProps","subClass","superClass","_setPrototypeOf","p","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","ReferenceError","input","hint","prim","toPrimitive","res","String","_toPrimitive","SecretsManagerClient","_AWSClient","_deleteSecret","_putSecretValue","_createSecret","_getSecret","_listSecrets","awsConfig","serviceName","commonHeaders","_callee","signedRequest","json","_context","sign","http","_handle_error","SecretsManagerOperation","ListSecrets","Secret","fromJSON","_callee2","id","_context2","SecretId","GetSecretValue","_x","_callee3","secret","description","versionID","tags","_context3","uuidv4","Name","Description","SecretString","ClientRequestToken","Tags","CreateSecret","_x2","_x3","_x4","_x5","_x6","_callee4","_context4","PutSecretValue","_x7","_x8","_x9","_callee5","_ref$recoveryWindow","recoveryWindow","_ref$noRecovery","payload","_context5","noRecovery","DeleteSecret","_x10","_x11","operation","response","errorCode","error_code","errorMessage","Message","__type","SecretsManagerServiceError","AWSClient","_endpoint","arn","secretString","createdDate","lastAccessedDate","lastChangedDate","ARN","CreatedDate","LastAccessedDate","LastChangedDate","_super2","_this2"],"sourceRoot":""}